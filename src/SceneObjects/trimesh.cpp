#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <iostream>
#include "../ui/TraceUI.h"
extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	// cout << "intersectLocal" << endl;
	glm::dvec3 a_coords = parent->vertices[ids[0]];
	glm::dvec3 b_coords = parent->vertices[ids[1]];
	glm::dvec3 c_coords = parent->vertices[ids[2]];

	// Ray - plane intersection
	double numerator = -glm::dot(r.getPosition() - a_coords, normal);
	double denominator = glm::dot(r.getDirection(), normal);

	if(denominator == 0){
		//cerr << "0" << endl;
		return false;
	}

	double t = numerator / denominator;

	if(t < 0){
		return false;
	}


	glm::dvec3 p = r.getPosition() + r.getDirection() * t;
	
	// cout << p.x << " " << p.y << " " << p.z << endl;

	glm::dvec3 vba = (b_coords - a_coords);
	glm::dvec3 vcb = (c_coords - b_coords);
	glm::dvec3 vac = (a_coords - c_coords);

	glm::dvec3 vpa = (p - a_coords);
	glm::dvec3 vpb = (p - b_coords);
	glm::dvec3 vpc = (p - c_coords);

    bool res = 	glm::dot(glm::cross(vba, vpa), normal) >= 0 &&
			glm::dot(glm::cross(vcb, vpb), normal) >= 0 &&
			glm::dot(glm::cross(vac, vpc), normal) >= 0;

	if(res){
		// Do areas
		double alpha = glm::length(glm::cross(b_coords - p, c_coords - p));
		double beta = glm::length(glm::cross(p - a_coords, c_coords - a_coords));
		double gamma = glm::length(glm::cross(b_coords - a_coords, p - a_coords));
		double denom = glm::length(glm::cross(vba, c_coords - a_coords));

		alpha /= denom;
		beta /= denom;
		gamma /= denom;
		// TODO sus?
		// i.setT(gamma);
		i.setUVCoordinates(glm::dvec2(alpha, beta));
		i.setObject(this->parent);

		if(this->parent->vertNorms){
			i.setN(glm::normalize(alpha * this->parent->normals[ids[0]] + beta * this->parent->normals[ids[1]] + (1-alpha-beta) * this->parent->normals[ids[2]]));
		} else{	
			i.setN(glm::normalize(normal));
		}
		if(this->parent->materials.size() != 0){
			i.setMaterial(alpha * *this->parent->materials[ids[0]] += beta * *this->parent->materials[ids[1]] += (1 - alpha - beta) * *this->parent->materials[ids[2]]);
		} else {
			i.setMaterial(getMaterial());
		}
		i.setT(t);
	}
    return res;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

std::vector<Geometry*> Trimesh::getAll(){
    std::vector<Geometry*> res;
    for (TrimeshFace* x : faces) {
        res.push_back((Geometry*)x);
		x->ComputeBoundingBox();
    }
    return res;
}